apiVersion: v1
kind: Template
metadata:
  name: openstack-horizon-template 
  annotations:
    description: "Horizon" 
    iconClass: "icon-redis" 
    tags: "openstack,horizon"
objects:   
  - apiVersion: v1
    kind: Route
    metadata:
      name: ${NAME}
      labels:
        name: ${NAME}
    spec:
      host: ""
      port:
        targetPort: 8080
      to:
        kind: Service
        name: ${NAME}
      wildcardPolicy: None
  - kind: Service
    apiVersion: v1
    metadata:
      labels:
        name: ${NAME}
      name: ${NAME}
    spec:
      ports:
        - port: 8080
          targetPort: 8080
          protocol: TCP
      selector:
        name: ${NAME}
    status:
      loadBalancer: {}
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      name: ${NAME}
    spec:
      replicas: 3
      selector:    
        name: ${NAME}
      triggers:
      - type: ConfigChange 
      strategy:
        type: Rolling       
      template:    
        metadata:
          labels:  
            name: ${NAME}
        spec:
          containers:
          - name: "horizon"
            env:
            - name: "KOLLA_CONFIG_STRATEGY"
              value: "${KOLLA_CONFIG_STRATEGY}"
            image: $REGISTRY/rhel-binary-horizon
            ports:
            - containerPort: 8080
              protocol: TCP
            volumeMounts:
            - name: config-volume
              mountPath: /var/lib/kolla/config_files/
          volumes:
          - name: config-volume
            configMap:
              name: horizon-kolla-config
          restartPolicy: Always
  - kind: ConfigMap
    apiVersion: v1
    metadata:
      name: ${NAME}-kolla-config
      namespace: default
      labels:
        name: horizon
    data:
      config.json: |
        {
            "command": "/usr/sbin/httpd -DFOREGROUND",
            "config_files": [
              {
                "source": "/var/lib/kolla/config_files/horizon.conf",
                "dest": "/etc/httpd/conf.d/horizon.conf",
                "owner": "horizon",
                "perm": "0644"
              },
              {
                "source": "/var/lib/kolla/config_files/horizon/glance_policy.json",
                "dest": "/etc/openstack-dashboard/glance_policy.json",
                "owner": "horizon",
                "perm": "0600",
                "optional": true
              },
              {
                "source": "/var/lib/kolla/config_files/horizon/heat_policy.json",
                "dest": "/etc/openstack-dashboard/heat_policy.json",
                "owner": "horizon",
                "perm": "0600",
                "optional": true
              },
              {
                "source": "/var/lib/kolla/config_files/horizon/keystone_policy.json",
                "dest": "/etc/openstack-dashboard/keystone_policy.json",
                "owner": "horizon",
                "perm": "0600",
                "optional": true
              },
              {
                "source": "/var/lib/kolla/config_files/horizon/neutron_policy.json",
                "dest": "/etc/openstack-dashboard/neutron_policy.json",
                "owner": "horizon",
                "perm": "0600",
                "optional": true
              },
              {
                "source": "/var/lib/kolla/config_files/horizon/nova_policy.json",
                "dest": "/etc/openstack-dashboard/nova_policy.json",
                "owner": "horizon",
                "perm": "0600",
                "optional": true
              },
              {
                "source": "/var/lib/kolla/config_files/local_settings",
                "dest": "/etc/openstack-dashboard/local_settings",
                "owner": "horizon",
                "perm": "0644"
              }
          ]
        }
      horizon.conf: |
        Listen 8080
        User horizon

        <VirtualHost *:8080>
          LogLevel warn
          ErrorLog /var/log/kolla/horizon/horizon.log
          CustomLog /var/log/kolla/horizon/horizon-access.log combined
    
          WSGIScriptReloading On
          WSGIDaemonProcess horizon-http processes=5 threads=1 user=horizon group=horizon display-name=%{GROUP} python-path=/usr/share/openstack-dashboard
          WSGIProcessGroup horizon-http
          WSGIScriptAlias / /usr/share/openstack-dashboard/openstack_dashboard/wsgi/django.wsgi
          WSGIPassAuthorization On
    
          <Location "/">
            Require all granted
          </Location>
    
          Alias /static /usr/share/openstack-dashboard/static
          <Location "/static">
            SetHandler None
          </Location>
        </VirtualHost>
    
        <IfModule mod_deflate.c>
          AddOutputFilterByType DEFLATE application/javascript
          AddOutputFilterByType DEFLATE application/rss+xml
          AddOutputFilterByType DEFLATE application/vnd.ms-fontobject
          AddOutputFilterByType DEFLATE application/x-font
          AddOutputFilterByType DEFLATE application/x-font-opentype
          AddOutputFilterByType DEFLATE application/x-font-otf
          AddOutputFilterByType DEFLATE application/x-font-truetype
          AddOutputFilterByType DEFLATE application/x-font-ttf
          AddOutputFilterByType DEFLATE application/x-javascript   
          AddOutputFilterByType DEFLATE application/xhtml+xml
          AddOutputFilterByType DEFLATE application/xml
          AddOutputFilterByType DEFLATE font/opentype
          AddOutputFilterByType DEFLATE font/otf
          AddOutputFilterByType DEFLATE font/ttf
          AddOutputFilterByType DEFLATE image/svg+xml
          AddOutputFilterByType DEFLATE image/x-icon
          AddOutputFilterByType DEFLATE text/css
          AddOutputFilterByType DEFLATE text/html
          AddOutputFilterByType DEFLATE text/javascript
          AddOutputFilterByType DEFLATE text/plain
          AddOutputFilterByType DEFLATE text/xml
        </IfModule>
        <IfModule mod_expires.c>
          <Filesmatch "\.(jpg|jpeg|png|gif|js|css|swf|ico|woff)$">
            ExpiresActive on
            ExpiresDefault "access plus 1 month"
            ExpiresByType application/javascript "access plus 1 year"
            ExpiresByType text/css "access plus 1 year"
            ExpiresByType image/x-ico "access plus 1 year"
            ExpiresByType image/jpg "access plus 1 year"
            ExpiresByType image/jpeg "access plus 1 year"
            ExpiresByType image/gif "access plus 1 year"
            ExpiresByType image/png "access plus 1 year"
            Header merge Cache-Control public
            Header unset ETag
          </Filesmatch>
        </IfModule>

      local_settings: |
        import os
        from django.utils.translation import ugettext_lazy as _
        from openstack_dashboard import exceptions
        from openstack_dashboard.settings import HORIZON_CONFIG
        DEBUG = False
        TEMPLATE_DEBUG = DEBUG
        COMPRESS_OFFLINE = True
        WEBROOT = '/'
        ALLOWED_HOSTS = ['*']
        OPENSTACK_API_VERSIONS = {
            "identity": 2.0,
        }
        LOCAL_PATH = '/tmp'
        SECRET_KEY='9ec4FeuYcv'
        SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
        CACHES = {
            'default': {
                'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
                'LOCATION': ['memcached:11211']    }
        }
        EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
        OPENSTACK_HOST = ${OPENSTACK_HOST}
        OPENSTACK_KEYSTONE_URL = "https://${OPENSTACK_HOST}:13000/v2.0"
        OPENSTACK_KEYSTONE_DEFAULT_ROLE = "_member_"
        OPENSTACK_SSL_NO_VERIFY = False
        OPENSTACK_KEYSTONE_BACKEND = {
            'name': 'native',
            'can_edit_user': True,
            'can_edit_group': True,
            'can_edit_project': True,
            'can_edit_domain': True,
            'can_edit_role': True,
        }
        OPENSTACK_HYPERVISOR_FEATURES = {
            'can_set_mount_point': False,
            'can_set_password': False,
            'requires_keypair': False,
            'enable_quotas': True
        }
        OPENSTACK_CINDER_FEATURES = {
            'enable_backup': True,
        }
        OPENSTACK_NEUTRON_NETWORK = {
            'enable_router': True,
            'enable_quotas': True,
            'enable_ipv6': True,
            'enable_distributed_router': False,
            'enable_ha_router': False,
            'enable_lb': True,
            'enable_firewall': True,
            'enable_vpn': True,
            'enable_fip_topology_check': True,
            'profile_support': None,
            'supported_vnic_types': ['*'],
        }
        OPENSTACK_HEAT_STACK = {
            'enable_user_pass': True,
        }
        IMAGE_CUSTOM_PROPERTY_TITLES = {
            "architecture": _("Architecture"),
            "kernel_id": _("Kernel ID"),
            "ramdisk_id": _("Ramdisk ID"),
            "image_state": _("Euca2ools state"),
            "project_id": _("Project ID"),
            "image_type": _("Image Type"),
        }
        IMAGE_RESERVED_CUSTOM_PROPERTIES = []
        OPENSTACK_ENDPOINT_TYPE = "publicURL"
        API_RESULT_LIMIT = 1000
        API_RESULT_PAGE_SIZE = 20
        SWIFT_FILE_TRANSFER_CHUNK_SIZE = 512 * 1024
        DROPDOWN_MAX_ITEMS = 30
        TIME_ZONE = "UTC"
        POLICY_FILES_PATH = '/etc/openstack-dashboard'
        LOGGING = {
            'version': 1,
            'disable_existing_loggers': False,
            'formatters': {
                'operation': {
                    'format': '%(asctime)s %(message)s'
                },
            },
            'handlers': {
                'null': {
                    'level': 'DEBUG',
                    'class': 'logging.NullHandler',
                },
                'console': {
                    'level': 'INFO',
                    'class': 'logging.StreamHandler',
                },
                'operation': {
                    'level': 'INFO',
                    'class': 'logging.StreamHandler',
                    'formatter': 'operation',
                },
            },
            'loggers': {
                'django.db.backends': {
                    'handlers': ['null'],
                    'propagate': False,
                },
                'requests': {
                    'handlers': ['null'],
                    'propagate': False,
                },
                'horizon': {
                    'handlers': ['console'],
                    'level': 'DEBUG',
                    'propagate': False,
                },
                'horizon.operation_log': {
                    'handlers': ['operation'],
                    'level': 'INFO',
                    'propagate': False,
                },
                'openstack_dashboard': {
                    'handlers': ['console'],
                    'level': 'DEBUG',
                    'propagate': False,
                },
                'novaclient': {
                    'handlers': ['console'],
                    'level': 'DEBUG',
                    'propagate': False,
                },
                'cinderclient': {
                    'handlers': ['console'],
                    'level': 'DEBUG',
                    'propagate': False,
                },
                'keystoneclient': {
                    'handlers': ['console'],
                    'level': 'DEBUG',
                    'propagate': False,
                },
                'glanceclient': {
                    'handlers': ['console'],
                    'level': 'DEBUG',
                    'propagate': False,
                },
                'neutronclient': {
                    'handlers': ['console'],
                    'level': 'DEBUG',
                    'propagate': False,
                },
                'heatclient': {
                    'handlers': ['console'],
                    'level': 'DEBUG',
                    'propagate': False,
                },
                'ceilometerclient': {
                    'handlers': ['console'],
                    'level': 'DEBUG',
                    'propagate': False,
                },
                'swiftclient': {
                    'handlers': ['console'],
                    'level': 'DEBUG',
                    'propagate': False,
                },
                'openstack_auth': {
                    'handlers': ['console'],
                    'level': 'DEBUG',
                    'propagate': False,
                },
                'nose.plugins.manager': {
                    'handlers': ['console'],
                    'level': 'DEBUG',
                    'propagate': False,
                },
                'django': {
                    'handlers': ['console'],
                    'level': 'DEBUG',
                    'propagate': False,
                },
                'iso8601': {
                    'handlers': ['null'],
                    'propagate': False,
                },
                'scss': {
                    'handlers': ['null'],
                    'propagate': False,
                },
            },
        }
        SECURITY_GROUP_RULES = {
            'all_tcp': {
                'name': _('All TCP'),
                'ip_protocol': 'tcp',
                'from_port': '1',
                'to_port': '65535',
            },
            'all_udp': {
                'name': _('All UDP'),
                'ip_protocol': 'udp',
                'from_port': '1',
                'to_port': '65535',
            },
            'all_icmp': {
                'name': _('All ICMP'),
                'ip_protocol': 'icmp',
                'from_port': '-1',
                'to_port': '-1',
            },
            'ssh': {
                'name': 'SSH',
                'ip_protocol': 'tcp',
                'from_port': '22',
                'to_port': '22',
            },
            'smtp': {
                'name': 'SMTP',
                'ip_protocol': 'tcp',
                'from_port': '25',
                'to_port': '25',
            },
            'dns': {
                'name': 'DNS',
                'ip_protocol': 'tcp',
                'from_port': '53',
                'to_port': '53',
            },
            'http': {
                'name': 'HTTP',
                'ip_protocol': 'tcp',
                'from_port': '80',
                'to_port': '80',
            },
            'pop3': {
                'name': 'POP3',
                'ip_protocol': 'tcp',
                'from_port': '110',
                'to_port': '110',
            },
            'imap': {
                'name': 'IMAP',
                'ip_protocol': 'tcp',
                'from_port': '143',
                'to_port': '143',
            },
            'ldap': {
                'name': 'LDAP',
                'ip_protocol': 'tcp',
                'from_port': '389',
                'to_port': '389',
            },
            'https': {
                'name': 'HTTPS',
                'ip_protocol': 'tcp',
                'from_port': '443',
                'to_port': '443',
            },
            'smtps': {
                'name': 'SMTPS',
                'ip_protocol': 'tcp',
                'from_port': '465',
                'to_port': '465',
            },
            'imaps': {
                'name': 'IMAPS',
                'ip_protocol': 'tcp',
                'from_port': '993',
                'to_port': '993',
            },
            'pop3s': {
                'name': 'POP3S',
                'ip_protocol': 'tcp',
                'from_port': '995',
                'to_port': '995',
            },
            'ms_sql': {
                'name': 'MS SQL',
                'ip_protocol': 'tcp',
                'from_port': '1433',
                'to_port': '1433',
            },
            'mysql': {
                'name': 'MYSQL',
                'ip_protocol': 'tcp',
                'from_port': '3306',
                'to_port': '3306',
            },
            'rdp': {
                'name': 'RDP',
                'ip_protocol': 'tcp',
                'from_port': '3389',
                'to_port': '3389',
            },
        }
        REST_API_REQUIRED_SETTINGS = ['OPENSTACK_HYPERVISOR_FEATURES',
                              'LAUNCH_INSTANCE_DEFAULTS',
                                      'OPENSTACK_IMAGE_FORMATS']
parameters:  
  - description: "horizon"
    name: NAME
    value: horizon
    required: true
  - description: "Kolla Configuration Strategy"
    name: KOLLA_CONFIG_STRATEGY
    value: COPY_ONCE
    required: true
  - description: "OpenStack Host"
    name: OPENSTACK_HOST
    value: 10.19.5.11
    required: true
  - description: "Registry Location"
    name: REGISTRY
    value: 172.30.202.25:5000/osp-dev
    required: true
